snippet here "Get the full path to location of current script" b
HERE="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
endsnippet

snippet repo-home "Get absolute path for current git repo" b
GIT_REPO_HOME="$(git rev-parse --show-toplevel)"
endsnippet


snippet codebase "Get name of git repo" b
CODEBASE="$(basename $(git remote get-url origin) .git)"
endsnippet

snippet now "Get current time" b
NOW="$(date +"%Y-%m-%dT%H:%M:%S")"
endsnippet

snippet ssp "spacer" Ab
echo '* DEBUG: ${1/./-/g}${VISUAL/./-/g} | `!v expand('%:t')`:`!v line('.')` | ${1/"/\\\"/g}${VISUAL/"/\\\"/g}'
echo "* DEBUG: $1${VISUAL}"  # NO_COMMIT
echo '* DEBUG: ${1/./-/g}${VISUAL/./-/g} | `!v expand('%:t')`:`!v line('.')` | ${1/./-/g}${VISUAL/./-/g}'
endsnippet

snippet base "Script template with parsing options and help message" b
#!/usr/bin/env bash
# vim: ft=sh softtabstop=2 tabstop=2 shiftwidth=2 expandtab autoindent cc=90

set -euo pipefail

. import_blockchain_module utils

__SCRIPT_NAME="$(basename "${BASH_SOURCE[0]}")"

function __show_help() {
  cat << HELP_USAGE

Description:

Usage: $__SCRIPT_NAME [-h|--help] ARG_1

Examples:
  $__SCRIPT_NAME

Arguments:
  ARG_1

Options:
  -h|--help
    Show this message.

HELP_USAGE
}

### And you are ready to go
function main(){
  ${2:echo "hello"}
}

${1:### !!! DELETE IF SUDO PRIVILEGE IS NOT REQUIRED !!!
if [[ "$EUID" -ne 0 ]]; then
  echoerror "This script must be run as root" >&2
  exit 1
fi}

main "${@:-}"
endsnippet

snippet baseminimal "Add shebang and basic options" b
#!/usr/bin/env bash
# vim: ft=sh softtabstop=2 tabstop=2 shiftwidth=2 expandtab autoindent cc=90

set -euo pipefail

. import_blockchain_module utils

endsnippet

snippet parseargs "Parse key word arguments" b
for arg in "$@"; do
  case "$arg" in
    -h|--help)
      __show_help
      exit
      ;;
    --${1:option}=*)
      $1="\$\{arg#*=\}"
      ;;
    *)
      # Skip unknown option
      ;;
  esac
  shift
done
endsnippet

snippet parseopts "Parse option" b
while getopts ':h' opt; do
  case "$opt" in
    h)
      __show_help
      exit 0
      ;;
    \?)
      utils::echo_warn "Invalid option: $OPTARG" 1>&2
      ;;
    :)
      utils::echo_warn "Invalid option: $OPTARG requires an argument" 1>&2
      ;;
  esac
done
shift $((OPTIND -1))
endsnippet

snippet help "Boilerplate for help message" b
__SCRIPT_NAME="$(basename "${BASH_SOURCE[0]}")"

function __show_help() {
  cat << HELP_USAGE

Description:

Usage: $__SCRIPT_NAME [-h|--help] ARG_1

Examples:
  $__SCRIPT_NAME

Arguments:
  ARG_1

Options:
  -h|--help
    Show this message.

HELP_USAGE
}
endsnippet
