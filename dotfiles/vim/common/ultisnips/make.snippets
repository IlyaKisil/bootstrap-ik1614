snippet here "Get the full path to location of current script" b
HERE = $(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))
endsnippet

snippet now "Get current time in ISO8601 format" b
NOW = $(shell date +%Y-%m-%dT%H:%M:%S)
endsnippet

snippet toc "Create target for updating readme with 'doctoc'" b
.PHONY: update-readme-toc

define README_TOC_TITLE
Table of Contents
-----------------
Generated with [DocToc](https://github.com/thlorenz/doctoc)

Last Update: $(shell date +%Y-%m-%d)
endef
export README_TOC_TITLE
## Update table of contents only for staged 'README.md' known to git. Requires 'doctoc' to be installed
update-readme-toc:
	git diff --name-only --cached \
		| grep README.md \
		| xargs -I FILE sh -c '{ doctoc --github --title "$${README_TOC_TITLE}" FILE && git add FILE; }'
endsnippet

snippet base "Boilerplate for any new Makefile" b
#########################################################################################
# This Makefile is self-documented
# Use ## before target to provide a description
#########################################################################################
.DEFAULT_GOAL := help

SHELL = /bin/bash -o errexit -o nounset -o pipefail
HERE  = $(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))

ifeq ($(shell uname), Darwin)
  GOOS = "darwin"
  SED = sed -i ''
else ifeq ($(shell uname), Linux)
  GOOS = "linux"
  SED = sed -i
endif



#########################################################################################
# For self-documenting of Makefile: use '##' before target to provide a description
#
# References:
# https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html
# https://github.com/drivendata/cookiecutter-data-science/blob/master/%7B%7B%20cookiecutter.repo_name%20%7D%7D/Makefile
#
# sed script explained:
# /^##/:
# 	* save line in hold space
# 	* purge line
# 	* Loop:
# 		* append newline + line to hold space
# 		* go to next line
# 		* if line starts with doc comment, strip comment character off and loop
# 	* remove target prerequisites
# 	* append hold space (+ newline) to line
# 	* replace newline plus comments by `---`
# 	* print line
# Separate expressions are necessary because labels cannot be delimited by
# semicolon; see <http://stackoverflow.com/a/11799865/1968>
#
#########################################################################################
.PHONY: help

## Show this message
help:
	@echo "$$(tput bold)Available rules:$$(tput sgr0)"
	@echo
	@sed -n -e "/^## / { \
		h; \
		s/.*//; \
		:doc" \
		-e "H; \
		n; \
		s/^## //; \
		t doc" \
		-e "s/:.*//; \
		G; \
		s/\\n## /---/; \
		s/\\n/ /g; \
		p; \
	}" ${MAKEFILE_LIST} \
	| LC_ALL='C' sort --ignore-case \
	| awk -F '---' \
		-v ncol=$$(tput cols) \
		-v indent=25 \
		-v col_on="$$(tput setaf 6)" \
		-v col_off="$$(tput sgr0)" \
	'{ \
		printf "%s%*s%s ", col_on, -indent, \$\$1, col_off; \
		n = split(\$\$2, words, " "); \
		line_length = ncol - indent; \
		for (i = 1; i <= n; i++) { \
			line_length -= length(words[i]) + 1; \
			if (line_length <= 0) { \
				line_length = ncol - indent - length(words[i]) - 1; \
				printf "\n%*s ", -indent, " "; \
			} \
			printf "%s ", words[i]; \
		} \
		printf "\n"; \
	}' \
	| more $(shell test $(shell uname) = Darwin && echo '--no-init --raw-control-chars')
endsnippet
